#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Apr 25 15:26:14 2024

@author: emelinepa
"""


from sklearn.model_selection import train_test_split
import pandas as pd 
import numpy as np
import statistics
from sklearn.model_selection import KFold, cross_val_score
from sklearn.model_selection import cross_val_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import roc_auc_score, accuracy_score
import matplotlib.pyplot as plt
from collections import Counter
from sklearn.svm import SVC, LinearSVC

file_path= '/Users/emelinepa/ownCloud - Emeline Pansart@owncloud.lcsb.uni.lu/Data/3_data_Liver_OmicEarTags_Cols.csv'
# Read the file into a DataFrame
data = pd.read_csv(file_path,index_col=0)

file_path_pheno='/Users/emelinepa/Documents/University/4th_semester/Z_Data_final.csv'
pheno = pd.read_csv(file_path_pheno,index_col=0)


pheno = pheno.align(data, axis=1, join='inner')[0]
data = data.reindex(columns=pheno.columns)


# Convert the DataFrame to a numpy array
data_array = data.values
# transpose
data_array=data_array.transpose()

# Convert the DataFrame to a numpy array
pheno_array = pheno.values
# Select a specific variable by its index
Taxa = (pheno_array[77]) # Duncaniella 
median = statistics.median(Taxa)
high = np.where(Taxa > median, 'high', 'low')

# Define the number of iterations
num_iterations = 100
cv = 5

# Define lists to store mean scores
linear_svc_mean_scores = []
svc_mean_scores = []

for i in range(num_iterations):
    # Split the data into train and test sets
    X_train, X_test, y_train, y_test = train_test_split(data_array, high, test_size=0.4, random_state=i)
    
    # Define the models
    linear_svc = LinearSVC()
    svc = SVC()
    
    # Perform cross-validation for LinearSVC
    linear_svc_scores = cross_val_score(linear_svc, X_train, y_train, cv=cv)
    linear_svc_mean_scores.append(linear_svc_scores.mean())
    
    # Perform cross-validation for SVC
    svc_scores = cross_val_score(svc, X_train, y_train, cv=cv)
    svc_mean_scores.append(svc_scores.mean())

# Print the mean scores for each iteration
print("LinearSVC Mean Scores:", linear_svc_mean_scores)
print("SVC Mean Scores:", svc_mean_scores)

# Calculate the overall mean scores
overall_linear_svc_mean = np.mean(linear_svc_mean_scores)
overall_svc_mean = np.mean(svc_mean_scores)

# Print the overall mean scores
print("Overall LinearSVC Mean Accuracy:", overall_linear_svc_mean) # 0.6403391812865498
print("Overall SVC Mean Accuracy:", overall_svc_mean) # 0.5350175438596491

# Choose the better option based on overall mean scores
if overall_linear_svc_mean > overall_svc_mean:
    print("LinearSVC is the better option.")
else:
    print("SVC is the better option.") # LinearSVC is the better option. 
